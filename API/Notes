

-- Json Generator 
 https://json-generator.com/
 
 -- To drop database
 dotnet ef database drop
 
 -- Section 1 - Intoduction
 1 - Introduction to the cource.
	- Building Dating App. Messeging system, live chat, paging and sorting.
	- .NET 5 + Angular + Entity Framework + HTML + boostrap + TypeScript + C#
	- Practical course
	- Learn by build
	
 2 - Setting up development environment.
	- download .NET Core from https://dotnet.microsoft.com/en-us/
    - download and install Node.js	- Convert and compile tyscript file into javascript.
	- Code Editor - Visual Studio Code Editor
	- Postman - to test API
	
 3 - Getting Help.
	- Try and solve the problem yourself first.
	- Check the basics.
	
 4 - Course assest and source code.
	- Source code : github.com/TryCatchLearn/DatingApp
 
 -- Section 2 - Building a walking skeleton part 1 - API
 
 -- Section 3 - Building a walking skeleton part 2 - Angular
 
 -- Section 4 - Authentication Basic
 
 -- Section 5 - Client Login and Register
 
 -- Section 6 - Routing in Angular
 
 -- Section 7 - Error Handling
 
 -- Section 8 - Extending API
 
 -- Section 9 - Building the user interface
99 - Introduction
 TypeScript:
 1. Using TypeScript Types.
 2. Using The Async Pipe
 3. Using boostrap for style.
 4. Basic css trick to enhance the look.
 5. Using a 3rd party photo gallery.
 
100 - Using TypeScript
 Type safety. 	
 let data: numner | string = 42;
 data = "10";
 
 interface car {
  color:string;
  model:string;
  topSpeed?:number;
 }
 const car1 = {color:'blue', model:'BMW'}
 const car2 = {color:'red', model:'Benz', topSpeed:100}
 
101 - Creating the Member Inteface.
	- Json to ts search for convert json to ts.
	- Copy and paste json data to get models according.
 
102 - Adding member service.
	- make use of Angular Environment files. Environment.ts
	- added apiurl
	- import environment in service and remove hardcode api url
	- added new member service. ng g s member --skip-test
	- passed token to api request.
 
103 - Retrieving the list of members.
    - Modification in Memner list component.
    - Import Member service in.
    
104 - Create member cards
	- Added new component member-card
    - Added @Input for reciving member from parent i.e member-list component
	- design the member-cad html
	
105 - Adding Style to the card
	- Added cs for animation afer hovering image.
	- Added some other style.
	- Encapsulation? - css level. ViewEncapsulation.Emulate. for local, ViewEncapsulation.None for global.
	
106 - Adding Anumated buttons.
	- added buttons on image of user for profile-like-envelop
	- added css for design buttons

107 - using an inteceptor to send the token.
	- removed send token code from member service; 
	- adding interceptor to send token to every request.
	- added jwt interceptor.

108 - Routing to the member details page
	- Changes in Member details component.
	- Change the routing from id to username 
	- include memberserivce and activeroute 
	- added load member function - fetched id from usr using - this.route.snapshot.paramMap.get('username')
	- resolved undefine member error by adding ngif befor displaying details
	
109 - Styling the member details page part 1
	- changes in member details component.
	- Added details of member and style the page.
	
110 - Styling the member details page part 2
	- added tabs modulte in shared module and export it.
	- copy paste style from student assests.
	- added tabs for about, interests, photo and messages.
	
111 - Adding Photo Gallery
	- Installed ngx-gallery 
		npm npm install @kolkov/ngx-gallery --force
	  from https://github.com/kolkov/ngx-gallery
	- Configure and added gallery to the Member details component.
	- added user.png photo from Student Assest to the angular assests.

112 - Summary.

-- Section 10 - Updating Resorces.
113 - Introduction
	- Implement persistence when udating resources in the API and gaining an uderstanding of:
	- Angular Template forms
	- The CanDeactivate Route Guard
	- The @ViewChild decorator
	- Persisting changes to the API
	- Adding loading indicators to the client app
	- Caching data in Angular services
	
114 - Creating member edit component
	- Added member-edit component in members folder. - added in routing
	- Added Account and Member service in member-edit component. and display username on html.
	
115 - Creating edit template form.
	- Desing html of edit form from copying details component.
	- Desing html page of edit member - fetch member data and render in edit page.

116	- Adding the update functionality
	- added @ViewChild('editForm') editForm: NgForm; to track and reset form.
	- added this.editForm.reset(this.member); in updateMember() to reset form.
	- editForm.dirty added to track form status and enable and disable warning and submit button.
	- form="editForm" this in button to submit form, this will work if submit button not in form.
	- form header look like --  <form #editForm="ngForm" id="editForm" (submit)="updateMember()">
	
117 - Adding a CanDeactive route Guard
	- Added Guard -- ng g guard prevent_unsaved_changes --skip-tests
	- Import MemberEditComponent in guard.
	- Added {path:'member/edit', component:MemberEditComponent, canDeactivate:[PreventUnsavedChangesGuard]}, in routing.
	- checked editform.dirty and show confirm message in guard.
	- Added @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {
				if(this.editForm.dirty) $event.returnValue = true;
			};
	- To listen event of the browser to show prent notofication.
	
118 - Persisting changes in the API.
	- Added MemberUpdateDto class.
	- Mapped in Automapper helper - CreateMap<MemberUpdateDto, AppUser>();
	- Added httpput UpdateMember method in UserController, to find username var username = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
	- check update methods on postman
	
119 - Updating the user in client App
	- Added updateMembers in Member service.
	- Modify UpdateMember method of member-edit component.
	
120 - Adding loading indicator.
	- Install NGX-Spinner for spinners. -- ng add ngx-spinner
	- imported NgxSpinnerModule in appmodule.
	- Added new service 'busy'
	- Added new interceptor loading. Impoer busy service in loading interceptor.
	- Added interceptor as provicer in appmodule.
	- added html in app.component.html <ngx-spinner type="ball-scale-multiple" bdColor= 'rgba(255,255,255,0)' color ='#333333'><h3>Loading....</h3></ngx-spinner>
	
121 - Using the service to store state. 
	- Modified the memberservice, stored the member data in members:Member[] = [];
	- check if data avaliable in members[] if yes then return of(this.members); else store data in members[] and return;
	- Modified getMember find and return member from members[] if not call api.
	- UpdateMember find member index and also update in member[]
	- update the type of members$: Observable<Member[]>; in Memberlistcomponent.
	- Removed loadMembers from Memberlistcomponent and modify NgOnIt wiht this.members$ = this.memberService.getMembers();
	- Modified the html of Memberlistcomponent - *ngFor="let member of members$ | async"
	
122 - Section 10 Summary.

-- Section 11 Adding photo upload functionality. 
123 - Introduction 
	- Implement photo upload functionality in the application and gain an uderstanding
		of the following:
	- Phote storage options.
		- Database
		- Files System in server
		- Cloud service - Cloudinary
	- Adding related entities.
	- Using 3rd party API
	- Using th Debugger (again)
	- Updating and deleting resources.
	- What to return when creating resources in a REST based API.
	
124 - Cloudinary Account.
    - created a cloudinay account with sk55 gmail.
	- Documentation link - https://cloudinary.com/documentation/dotnet_integration#sample_projects

125 - Configure cloudinary in the API.
	- Insatall nuget pakage - CloudinaryDotNet
	- Added CloudName, Apikey and Apisecret to the appsetting.json.
	- Strongly configured in servcice - ApplicationServiceExtention - AddApplicationServices - services.Configure<CloundinarySetting>(config.GetSection("CloudinarySetting"));

126 - Adding a photo service
	- Added IPhotoservice interface 
	- Added PhotoService and implment the IPhotoservice inteface.
	- Added login to upload and delete photo from cloudinary.
	- Added service to ApplicationServiceExtention - services.AddScoped<IPhotoservice, PhotoService>();

127 - Updating the Users Controller
	- inject the photo service in the user control.
	- added a AddPhoto method to add photo to cloudinary.
	- added class ClaimsPrincipalExtensions for GetUserName Extention method to ClaimsPrincipal.

128	- Testing the photo upload.
	- Unable debugger - crt-shift-p -> .NET: Generator Assest for build and debug -> dotnet watch run -> goto debugger -> select attatch -> click on start debugging -> select api.exe
	- Goto postman and test section 11
	- If resource is created we should return 201 create response.
	
129 - Using the Ceated At Route method. (for send 201 response)
	- Added route name to the GetUser method of  UsersController -  [HttpGet("{username}", Name = "GetUser")] 
	- change the return of AddPhoto method of UserController.
	- change from  return _mapper.Map<PhotoDto>(photo); to - return CreatedAtRoute("GetUser", new { username = user.UserName }, _mapper.Map<PhotoDto>(photo));
	
130 - Adding a photo editor component 
	- Added a photo-editor component in the members folder.
	- Added the photo-editor component in member-edit component under photo edit section -  <app-photo-editor [member]="member"></app-photo-editor>
	
131 - Adding a photo uploader. part 1
	- ng2-file-upload ng pakage for uploading files. - https://valor-software.com/ng2-file-upload/
	- add/install pakage - npm install ng2-file-upload --save 
	- copy code from line 17 to 116 from ng2-file-upload example.
	- Configured the ng2-file uploader in photo-editor component.
	
132 - Adding a photo uploader part 2
	- Made changes in the html of photo-editor component.
	
133 - Setting the main photo in the API.
	- Added a SetMainPhoto method in UserController with route -- [HttpPut("set-main-photo/{photoId}")]  
	- added a logic to flase previous photo and make current photo to Ismain.
	
134 - Adding the main photo image to the nav bar.
	- Added PhotoUrl filed in the UserDto.
	- Include photos in user and return photourl from the login method of account controller.
	- Added photoUrl in the user interface of angular.
	- Modify the setCurrentUser method of account service
           
135 - Setting the main photo in the client
	- Added setMainPhoto method in the member service.
	- Added setMainPhoto in the photo-editor component.
	- Modify the main button in html of photo-editor component --  <button [disabled]="photo.isMain" (click)="setMainPhoto(photo)" [ngClass]="photo.isMain ? 'btn-success active' : 'btn-outline-success'" class="btn btn-sm"> Main</button>
	
136 - Deleting photo - API 
	- Added a DeletePhoto method in the UsersController 
	- check for main photo, null and cloudinary fails.
	
137 - Deleting the photo - client
	- Added deletePhoto method in the member servcice.
	- added deletePhoto method in the photo-editor component.
	- modify delete button in html of photo-editor component. - <button [disabled]="photo.isMain" (click)="deletePhoto(photo.id)" class="btn btn-sm btn-danger"><i class="fa fa-trash"></i></button>
	
138 - Section 11 Summary.