

-- Json Generator 
 https://json-generator.com/
 
 -- To drop database
 dotnet ef database drop
 
 -- Section 1 - Intoduction
 1 - Introduction to the cource.
	- Building Dating App. Messeging system, live chat, paging and sorting.
	- .NET 5 + Angular + Entity Framework + HTML + boostrap + TypeScript + C#
	- Practical course
	- Learn by build
	
 2 - Setting up development environment.
	- download .NET Core from https://dotnet.microsoft.com/en-us/
    - download and install Node.js	- Convert and compile tyscript file into javascript.
	- Code Editor - Visual Studio Code Editor
	- Postman - to test API
	
 3 - Getting Help.
	- Try and solve the problem yourself first.
	- Check the basics.
	
 4 - Course assest and source code.
	- Source code : github.com/TryCatchLearn/DatingApp
 
 -- Section 2 - Building a walking skeleton part 1 - API
 
 -- Section 3 - Building a walking skeleton part 2 - Angular
 
 -- Section 4 - Authentication Basic
 
 -- Section 5 - Client Login and Register
 
 -- Section 6 - Routing in Angular
 
 -- Section 7 - Error Handling
 
 -- Section 8 - Extending API
 
 -- Section 9 - Building the user interface
99 - Introduction
 TypeScript:
 1. Using TypeScript Types.
 2. Using The Async Pipe
 3. Using boostrap for style.
 4. Basic css trick to enhance the look.
 5. Using a 3rd party photo gallery.
 
100 - Using TypeScript
 Type safety. 	
 let data: numner | string = 42;
 data = "10";
 
 interface car {
  color:string;
  model:string;
  topSpeed?:number;
 }
 const car1 = {color:'blue', model:'BMW'}
 const car2 = {color:'red', model:'Benz', topSpeed:100}
 
101 - Creating the Member Inteface.
	- Json to ts search for convert json to ts.
	- Copy and paste json data to get models according.
 
102 - Adding member service.
	- make use of Angular Environment files. Environment.ts
	- added apiurl
	- import environment in service and remove hardcode api url
	- added new member service. ng g s member --skip-test
	- passed token to api request.
 
103 - Retrieving the list of members.
    - Modification in Memner list component.
    - Import Member service in.
    
104 - Create member cards
	- Added new component member-card
    - Added @Input for reciving member from parent i.e member-list component
	- design the member-cad html
	
105 - Adding Style to the card
	- Added cs for animation afer hovering image.
	- Added some other style.
	- Encapsulation? - css level. ViewEncapsulation.Emulate. for local, ViewEncapsulation.None for global.
	
106 - Adding Anumated buttons.
	- added buttons on image of user for profile-like-envelop
	- added css for design buttons

107 - using an inteceptor to send the token.
	- removed send token code from member service; 
	- adding interceptor to send token to every request.
	- added jwt interceptor.

108 - Routing to the member details page
	- Changes in Member details component.
	- Change the routing from id to username 
	- include memberserivce and activeroute 
	- added load member function - fetched id from usr using - this.route.snapshot.paramMap.get('username')
	- resolved undefine member error by adding ngif befor displaying details
	
109 - Styling the member details page part 1
	- changes in member details component.
	- Added details of member and style the page.
	
110 - Styling the member details page part 2
	- added tabs modulte in shared module and export it.
	- copy paste style from student assests.
	- added tabs for about, interests, photo and messages.
	
111 - Adding Photo Gallery
	- Installed ngx-gallery 
		npm npm install @kolkov/ngx-gallery --force
	  from https://github.com/kolkov/ngx-gallery
	- Configure and added gallery to the Member details component.
	- added user.png photo from Student Assest to the angular assests.

112 - Summary.

-- Section 10 - Updating Resorces.
113 - Introduction
	- Implement persistence when udating resources in the API and gaining an uderstanding of:
	- Angular Template forms
	- The CanDeactivate Route Guard
	- The @ViewChild decorator
	- Persisting changes to the API
	- Adding loading indicators to the client app
	- Caching data in Angular services
	
114 - Creating member edit component
	- Added member-edit component in members folder. - added in routing
	- Added Account and Member service in member-edit component. and display username on html.
	
115 - Creating edit template form.
	- Desing html of edit form from copying details component.
	- Desing html page of edit member - fetch member data and render in edit page.

116	- Adding the update functionality
	- added @ViewChild('editForm') editForm: NgForm; to track and reset form.
	- added this.editForm.reset(this.member); in updateMember() to reset form.
	- editForm.dirty added to track form status and enable and disable warning and submit button.
	- form="editForm" this in button to submit form, this will work if submit button not in form.
	- form header look like --  <form #editForm="ngForm" id="editForm" (submit)="updateMember()">
	
117 - Adding a CanDeactive route Guard
	- Added Guard -- ng g guard prevent_unsaved_changes --skip-tests
	- Import MemberEditComponent in guard.
	- Added {path:'member/edit', component:MemberEditComponent, canDeactivate:[PreventUnsavedChangesGuard]}, in routing.
	- checked editform.dirty and show confirm message in guard.
	- Added @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {
				if(this.editForm.dirty) $event.returnValue = true;
			};
	- To listen event of the browser to show prent notofication.
	
118 - Persisting changes in the API.
	- Added MemberUpdateDto class.
	- Mapped in Automapper helper - CreateMap<MemberUpdateDto, AppUser>();
	- Added httpput UpdateMember method in UserController, to find username var username = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
	- check update methods on postman
	
119 - Updating the user in client App
	- Added updateMembers in Member service.
	- Modify UpdateMember method of member-edit component.
	
120 - Adding loading indicator.
	- Install NGX-Spinner for spinners. -- ng add ngx-spinner
	- imported NgxSpinnerModule in appmodule.
	- Added new service 'busy'
	- Added new interceptor loading. Impoer busy service in loading interceptor.
	- Added interceptor as provicer in appmodule.
	- added html in app.component.html <ngx-spinner type="ball-scale-multiple" bdColor= 'rgba(255,255,255,0)' color ='#333333'><h3>Loading....</h3></ngx-spinner>
	
121 - Using the service to store state. 
	- Modified the memberservice, stored the member data in members:Member[] = [];
	- check if data avaliable in members[] if yes then return of(this.members); else store data in members[] and return;
	- Modified getMember find and return member from members[] if not call api.
	- UpdateMember find member index and also update in member[]
	- update the type of members$: Observable<Member[]>; in Memberlistcomponent.
	- Removed loadMembers from Memberlistcomponent and modify NgOnIt wiht this.members$ = this.memberService.getMembers();
	- Modified the html of Memberlistcomponent - *ngFor="let member of members$ | async"
	
122 - Section 10 Summary.

-- Section 11 Adding photo upload functionality. 
123 - Introduction 
	- Implement photo upload functionality in the application and gain an uderstanding
		of the following:
	- Phote storage options.
		- Database
		- Files System in server
		- Cloud service - Cloudinary
	- Adding related entities.
	- Using 3rd party API
	- Using th Debugger (again)
	- Updating and deleting resources.
	- What to return when creating resources in a REST based API.
	
124 - Cloudinary Account.
    - created a cloudinay account with sk55 gmail.
	- Documentation link - https://cloudinary.com/documentation/dotnet_integration#sample_projects

125 - Configure cloudinary in the API.
	- Insatall nuget pakage - CloudinaryDotNet
	- Added CloudName, Apikey and Apisecret to the appsetting.json.
	- Strongly configured in servcice - ApplicationServiceExtention - AddApplicationServices - services.Configure<CloundinarySetting>(config.GetSection("CloudinarySetting"));

126 - Adding a photo service
	- Added IPhotoservice interface 
	- Added PhotoService and implment the IPhotoservice inteface.
	- Added login to upload and delete photo from cloudinary.
	- Added service to ApplicationServiceExtention - services.AddScoped<IPhotoservice, PhotoService>();

127 - Updating the Users Controller
	- inject the photo service in the user control.
	- added a AddPhoto method to add photo to cloudinary.
	- added class ClaimsPrincipalExtensions for GetUserName Extention method to ClaimsPrincipal.

128	- Testing the photo upload.
	- Unable debugger - crt-shift-p -> .NET: Generator Assest for build and debug -> dotnet watch run -> goto debugger -> select attatch -> click on start debugging -> select api.exe
	- Goto postman and test section 11
	- If resource is created we should return 201 create response.
	
129 - Using the Ceated At Route method. (for send 201 response)
	- Added route name to the GetUser method of  UsersController -  [HttpGet("{username}", Name = "GetUser")] 
	- change the return of AddPhoto method of UserController.
	- change from  return _mapper.Map<PhotoDto>(photo); to - return CreatedAtRoute("GetUser", new { username = user.UserName }, _mapper.Map<PhotoDto>(photo));
	
130 - Adding a photo editor component 
	- Added a photo-editor component in the members folder.
	- Added the photo-editor component in member-edit component under photo edit section -  <app-photo-editor [member]="member"></app-photo-editor>
	
131 - Adding a photo uploader. part 1
	- ng2-file-upload ng pakage for uploading files. - https://valor-software.com/ng2-file-upload/
	- add/install pakage - npm install ng2-file-upload --save 
	- copy code from line 17 to 116 from ng2-file-upload example.
	- Configured the ng2-file uploader in photo-editor component.
	
132 - Adding a photo uploader part 2
	- Made changes in the html of photo-editor component.
	
133 - Setting the main photo in the API.
	- Added a SetMainPhoto method in UserController with route -- [HttpPut("set-main-photo/{photoId}")]  
	- added a logic to flase previous photo and make current photo to Ismain.
	
134 - Adding the main photo image to the nav bar.
	- Added PhotoUrl filed in the UserDto.
	- Include photos in user and return photourl from the login method of account controller.
	- Added photoUrl in the user interface of angular.
	- Modify the setCurrentUser method of account service
           
135 - Setting the main photo in the client
	- Added setMainPhoto method in the member service.
	- Added setMainPhoto in the photo-editor component.
	- Modify the main button in html of photo-editor component --  <button [disabled]="photo.isMain" (click)="setMainPhoto(photo)" [ngClass]="photo.isMain ? 'btn-success active' : 'btn-outline-success'" class="btn btn-sm"> Main</button>
	
136 - Deleting photo - API 
	- Added a DeletePhoto method in the UsersController 
	- check for main photo, null and cloudinary fails.
	
137 - Deleting the photo - client
	- Added deletePhoto method in the member servcice.
	- added deletePhoto method in the photo-editor component.
	- modify delete button in html of photo-editor component. - <button [disabled]="photo.isMain" (click)="deletePhoto(photo.id)" class="btn btn-sm btn-danger"><i class="fa fa-trash"></i></button>
	
138 - Section 11 Summary.


-- Section 12 - Reactive Forms

139 - Introduction 
	- Implement more advanced forms using Reactive Forms in Angular and understand how to:
	- Use Reactive Forms
	- Use Angular Validation for inputs
	- Implement custom validators
	- Implement reusable form controls
	- Working with Date inputs.
	
140 - Reactive Form introduction -
	- Import ReactiveFormsModule to the AppModule.
	- Added a Reactive Form for register new user.
	- Define registerForm: FormGroup; in register component.
	- Initialize the form in ngOnIt
	- Added [formGroup]="registerForm"  and formControlName="username" in the html.

141 - Client side validation.
	- Added a validation for registerForm files -     username: new FormControl('Hello', Validators.required), 
	  password: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]),

142 - Adding custom validators
	- added method for custom validation - matchValues(matchTo: string): ValidatorFn {
      return (control: AbstractControl) => { return control.value === (control?.parent?.controls as { [key: string]: AbstractControl })[matchTo].value ? null : { isMatching: true }; } }
	- added validator in register form  confirmPassword: new FormControl('', [Validators.required, this.matchValues('password')])

143 - Validation feedback
	- Added a class for invalid input - [class.is-invalid]="registerForm.get('confirmPassword')?.errors && registerForm.get('confirmPassword')?.touched"
	- Added validation feedback to inputs
	    <div *ngIf="registerForm.get('confirmPassword')?.hasError('required')" class="invalid-feedback">Please enter a confirm password</div>
        <div *ngIf="registerForm.get('confirmPassword')?.hasError('isMatching')" class="invalid-feedback">Confirm password must match password</div>

144 - Creating reusable text inputs.
	- Added new component ng g c text-input --skip-tests
	- Modify test-input-component.ts 
	- Added  @Input() label: string; - @Input() type = 'text'; - constructor(@Self() public ngControl: NgControl) { this.ngControl.valueAccessor = this; } 
	- Added html for common input 
			<div class="form-group">
				<input [class.is-invalid]="ngControl.touched && ngControl.invalid" type="{{type}}}}" class="form-control"
					[formControl || null]="ngControl.control" placeholder="{{label}}" />
				<div *ngIf="ngControl.control?.errors?.['required']" class="invalid-feedback">Please enter a {{label}}}</div>
				<div *ngIf="ngControl.control?.errors?.['minlength']" class="invalid-feedback">
					{{label}}} must be at least {{ngControl.control?.errors?.['minlength']['requiredLength']}}
				</div>
				<div *ngIf="ngControl.control?.errors?.['maxlength']" class="invalid-feedback">
					{{label}}} must be at most {{ngControl.control?.errors?.['maxlength']['requiredLength']}}
				</div>
				<div *ngIf="ngControl.control?.errors?.['isMatching']" class="invalid-feedback">
				Password do not match
				</div>
			</div>
	- update tconfig.json - "strictTemplates": false - by me
	- Update html code of register form - <app-text-input [formControl]="registerForm.controls['password']" [label]="'Password'" [type]="'password'"></app-text-input>
	
145 - Using the form builder service.
	- injected FormBuilder in the register component.
	- change the initialization of registerForm: FormGroup.
	- this.registerForm = this.fb.group({
         username: ['', Validators.required],
         password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]],
         confirmPassword: ['', [Validators.required, this.matchValues('password')]]
      });
	  
146 - Expanding the register form.
	- Added more inputs in registration form , Gender, Known As, DOB, city, country.
	
147 - Adding reusable data input.
	- imported BsDatepickerModule in shared moduler and exported as well.
	- Added new component for data-input ng g c date-input.
	- added css for datetime picker in angular.json -- "./node_modules/ngx-bootstrap/datepicker/bs-datepicker.css",
	- configure the bs datetime picker in component -  @Input() label:string; @Input() maxDate:Date; bsConfig: Partial<BsDatepickerConfig>;
	- constructor(@Self() public ngControl: NgControl) { this.ngControl.valueAccessor = this; this.bsConfig = { containerClass: 'theme-red', dateInputFormat: 'DD MMMM YYYY' } }

148 - Updating API registration method.
	- Added new fileds in RegisterDto.
	- Added new mapper in autoMapperProfiles - Helper -  CreateMap<RegisterDto, AppUser>();
	- added  var user = _mapper.Map<AppUser>(register); to the register method of account controller.
	- added knownAs filed in UserDto and retrun it from register and login method.

149 - Client side registration.
	- Added validationErrors: string[] = []; to show list of server sides validation.
	- Modify register() method of register component redirect to members page if success else show errors.
	- tested the functionality and fixes the photos updated issues of default photo.
	
150 - Section 12 summary.
	

-- Section 13 - Paging, sorting and filtering.
151 - Introduction
	- Implement paging, sorting, filtering and gain an understanding of the following:
	- 1. How to implement pagination on the API & client.
	- 2. Deferred Execution using IQuerable -
	- 3. How to implement filtering on  API & client
	- 4. How to implement sorting on API & client
	- 5. Using action Filters
	- 6. Adding a TimeAgo pipe
	- 7. Implement caching in the client for paginated resources.
	- Deferred Execution - IQuerable<User> -> var Query = context.Users.Where(x => x.Gender == gender).Take(5).Skip(5).AsQuerable();
	- Execution - Query.ToListAsync() - Query.ToArrayAsync() - Query.ToDictionary() - Query.Count();

152 - Adding a paged list class.
	- Make reusable class for the pagination.
	- Added Generic PagedList class in Helpers of Api.
	- Added CreateAsync static method in the PageList class to receiv data from DB.

153 - Adding Helper classes for pagination.
	- Added PaginationHeader class to pass the pagination details in response header and sent back to the client.
	- Added HttpExtensions.cs class to add pagination details to header.
	- Added AddPaginationHeader extention method int HttpExtensions and added pagination header to the response.
	- Added UserParams.cs class in helper to add default pageSize, MaxPageSize and default PageNumber.
	
154 - Using the pagination classes.
	- Changed the return type of GetMembersAsync in IUserRepository to PagedList<MemnerDto> and alose take UserParams as parameter.
	- Changed the implimentation of GetMembersAsync in UserRepository as well.
	- Modified the GetUsers method of UsersController to return PageList<MemberDto> and pagination details in header.
	
155 - Setting up the client pagination.
	- Added Pagination.ts interface in model folder.
	- Modified the getMembers method of memberService.
	- Added loadMembers method in the member-list component.
	- Made the changes in html of member-list component.
	
156 - Using the angular boostrap pagination compenent.
	- import PaginationModule from 'ngx-boostrap/pagination' in shared module.
	- Modified html of member-list compenent to add pagination directry.
	
157 - Adding filtering to the API.
	- Added CurrentUserName and Gender property in userparam.
	- Modified the GetUsers method of UserController.
	- Modified the GetMembersAsync method of UserRepository - added where condition on gender and currentuser.

158 - Adding additional filters.
	- Added min and max age property in the UserParams.
	- Modified the GetMembersAsync method of UserRepository. added condition on min and max age.

159 - Cleaning up the member service.
	- Added a Gender property in the UserDto. to avoid server call to get gender.
	- Update Gender in Login and register method.
	- Added knownAs and gender property in User interface of the client.
	- Added a UserParams.ts to add all the params to send to the api.
	- Added getMembers(userParams: UserParams) to the member servcice.
	- Added getPaginationHeader to the member servcice to get pagination header.
	- Added private getPaginatedResult<T>(url: string, params: HttpParams) to member servcice to return generic result.
	- Modified the changes in the member-list compenent.

160 - Adding filter buttons the client.
	- added and initalized userParams in the member-list component using account service.
	- modified the member-list html component to show filtes.
	- added resetFilters method to reset the filter.
	
161 - Adding sorting functionality.
	- Added OrderBy property in the userParams clss of api.
	- modified GetMembersAsync method of the member service.
	    query = userParams.OrderBy switch 
                {
                    "created" => query.OrderByDescending(u => u.Created),
                    _ => query.OrderByDescending(u => u.LastActive)
                };

162 - Adding a action filter.
	- Added LogUserActivity.cs in the helper folder of api. implement the IAsyncActionFilter.
		public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            var resultContext = await next();

            if (resultContext.HttpContext.User.Identity.IsAuthenticated) return;
            
            var username = resultContext.HttpContext.User.GetUserName();
            var repo = resultContext.HttpContext.RequestServices.GetService<IUserRepository>();
            var user = await repo.GetUserByUserNameAsync(username);
            user.LastActive = DateTime.Now;
            await repo.SaveAllAsync();
             
        }
	- added attrinute to the base controller  [ServiceFilter(typeof(LogUserActivity))].

163 - Making the Last Active action filter more optimal.
	- Added -new Claim(JwtRegisteredClaimNames.NameId, user.Id.ToString()), in token service. to fetch user by id.
	- Modified ClaimsPrincipalExtensions-GetUserName() to change the parameter.
	- added GetUserId method in the ClaimsPrincipalExtensions.

164 - Sorting on the client.
	- imported ButtonsModule from ngx-boostrap/buttons
	- Added redio button for sorting on html of member-list component.
	- modified the getMembers method of the member servcice. added orderby parameter.
	
165 - Formating Dates.
	- npm install ngx-timeago --save 
	- imported TimeagoModule in the shared module.
	- added {{member.lastActive | timeago}} pipe in the html of member details component.

166 - Restoring the caching for the members.
	- Declared   memberCache = new Map();
	- Storing the value in map with key, key is join params of user like //console.log(Object.values(userParams).join('-'));
	-  var response = this.memberCache.get(Object.values(userParams).join('-')); if(response) { return of(response); }
	- return this.getPaginatedResult<Member[]>(this.baseUrl + "users", params)
    .pipe(map(response => { this.memberCache.set(Object.values(userParams).join('-'), response); return response; }));
	
167 - Restoring caching for the member details.
	- getMember(username: string){
		let member = [...this.memberCache.values()]
		.reduce((arr, elem) => arr.concat(elem.result), [])
		.find((member: Member) => member.username === username);
		if(member) { return of(member); }
		return this.http.get<Member>(this.baseUrl + 'users/' + username); }
 
168 - Remembering the filters for a user in the service.
	- moved UserParam declaration from member-list component to member service.
		this.accountService.currentUser$.pipe(take(1)).subscribe(user => {
      this.user = user;
      this.userParams = new UserParams(user); });
	- Added other helper method in member service to get, set and reset UserParams.

169 - Section 13 summary.

-- Section 14 - Adding the like user feature.
170 - Intoduction
	- Implement the 'like user' functionality and gain an uderstanding of the following.
	- 1. Many to many relationships 
	- 2. Configuring entities in the DBContext.
	- Fluent API
		AppUser - Has One SourceUser - with Many LikedUsers
		AppUser - Hse one LikedUser - with Many  LikedByUsers

171 - Adding a likes entity
	- Added a UserLike entity in entities folder.
	- Added LikedByUsers and LikedUsers property in AppUser.cs Entity.
	- Configure UserLike entity in the DataContext.
	- Add migration and rerun the API.
	- Likes Table created with SourceUserId and LikedUserId
	
172 - Adding a likes repository
	- Added LikesDto in DTO folder.
	- Added ILikesRepository interface, with 3 methods 1. GetUserLike, 2.GetUserWithLikes, GetUserLikes
	- Added LikesRepository repository in Data folder.
	- Added a likes service in ApplicationServiceExtention.

173 - Implementing the Likes Repository.
	- Implemented the LikesRepository.
	
174 - Controller methods for the likes fautures.
	- Added AddLike(string username) and GetUserLikes(string predicate) endpoint on the Likes Controller.
	
175 - Setting up the likes functions in the Angular app.
	- Added addLike and getLikes in the member service.
	- Added addLike in member-cad component and (click)="addLike(member)" to the html.
	- Modified the error interceptor to check error object and show error message to the toastr. typeof(error.error) === 'object'
	
176 - Adding the like component.
	- added loadLikes() in the list component and load the member on the html.
	- fetched the liked/likedby members from the member service.

177 - Adding pagination to the likes.
	- removed pagination related properties from the UserParam and create separeate base class as pagination.cs
	- Added LikesParam.cs for like parameters.
	- Changed the return type of GetUserLikes to PageList.
	- Modified the GetUserLikes of LikesRepository -  return await PagedList<LikeDto>.CreateAsync(likedUsers, param.PageNumber, param.PageSize);
	- Modified the GetUserLikes controller method, added pagination header - Response.AddPaginationHeader(users.CurrentPage, users.PageSize, users.TotalCount, users.TotalPages);
	
178 - Paginating the likes on the client.
	- Modified the getLikes() of member servcice.
	- modified loadLikes() and Added pageChanged() in the list component.
	- Added pagination html in the list component.

179 - Section 14 summary.

-- Section 15 - Adding the messaging feature.

180 - Introduction
	- Implement the Messeging functionality and gain an uderstanding of the follwoing.
	- 1. More many to many to many relationships.
	- 2. Using query params in Angular
	- 3. Using Route resolvers in Angular.
	
181 - Setting up the entities for the messaging.
	- Added Message.cs entity in API.
	- Update AppUser.cs, added MessagesSent and MessageRecieved properties.
	- Updated the DataContext, added the message entity and related configurations.
	- Created the migrations and restart API.
	
182 - Setting up the message repository.
	- Added IMessageRepository interface.
	- Added MessageDto.cs in Dto folder. added more filed like SenderPhotoUrl and ReceipientPhotoUrl.
	- Added MessageRepository and implememted IMessageRepository methods.
	- Added sevice map in ApplicationServiceExtention Extention.
	
183 - Setting up the automapper profiles.
	- Configured automapper, configured SenderPhotoUrl and ReceipientPhotoUrl.
	- Added CreateMessageDto.
	
184 - Adding a message controller.
	- Added a MessagesController 
	- Added the logic of - CreateMessage().
	
185 - Getting the messages from the repo.
	- Added MessageParams.cs in Helper folder.
	- Implemented the GetMessagesForUser() in MessageRepository.
	- Added GetMessagesForUser() in the MessageController.

186 - Getting messages thread for 2 users.
	- Implemented GetMessageThread() of MessageRepository.
	- Added GetMessageThread() in the message controller.

187 - Setting up the Angular app for messaging 
	- Added Message.ts interface - convert json to ts - model
	- Added new 'message' service - ng g s message 
	- Added paginationHelper.ts and moved the pagination method to it from member service.
	- Added getMessages() to the message service.
	- Added loadMessages() to the Message component.
	
188 - Designing the Inbox.
	- Designed the html of the message component.
	
189 - Adding message thread in the client.
	- Added getMessageThread() in message servcice.
	- Added member-message component in members.
	- Added loadMessages() in member message component to load the thread.
	- Added - <app-member-messages [username]="member.username"></app-member-messages> - to message tab of member details component.
	
190 - Styling the message thread.
	- Designed the member message component.
	
191 - Activating the message tab.
	- moved loadMessages() from member-message component to member details component.
	- change @Input() username to messages:Message[].
	- Added '#memberTabs' to the tabset of the member-details component.
	- Added -(selectTab)="onTabActivated($event)" to every single tab.
	- Added @ViewChild('memberTabs') memberTabs: TabsetComponent; to memder - details.
	- Added to method member details 
		onTabActivated(data: TabDirective) {
				this.activeTab = data;
				if(this.activeTab.heading === 'Messages' && this.messages.length === 0) { this.loadMessages(); } }
				
192 - Using query params (redirect to message tab from Member page after click on evelope).
	- added selectTab() method to activate a tabe by tabid. added click event to the message button of member details page to activate message tab.
	- added in member card html - passes query parameter- <button class="btn btn-primary mr-1" routerLink="/members/{{member.username}}" [queryParams]="{tab: 3}"> 
				<i class="fa fa-envelope"></i> </button>
	- added - this.route.queryParams.subscribe(params => {
      params['tab'] ? this.selectTab(params['tab']) : this.selectTab(0); }); - in the onInit of member-details page but still gettin error for resolve the error
	  we can use route resolver.

193 - Using route resolver.
	- Route resolver - allow us to get access to data before the compenent is contructed.
	- removed  *ngIf="member" from html of member details.
	- Added 'memeber-detailed-resolver.ts' in _resolvers folder. -- ng generate r memeber-detailed-resolver.ts
	- Added a code to ger member data from member service using route params. in member-detailed-resolver.
	- Fetch member data in member details in OnInIt from route like - this.route.data.subscribe(data => { this.member = data['member']; }); 
	- removed the loadMember method of the member details component.
	
194 - Sending Messages
	- Added sendMessage() in the message service.
	- Added from reference to send message  - #messageForm="ngForm" (ngSubmit)="sendMessage()" 
	- Added sendMessage() in member message  & - @ViewChild('messageForm') messageForm: NgForm; - this.messages.push(message); this.messageForm.reset();
	
195 - Fixing the photo weirdness.
	- added a loading flag. [hidden]="loading" used in html as.
	
196 - Deleting messages on the API.
	- Added DeleteMessage() in the MessageController.
	- Added delete check in the GetMessagesForUser() and GetMessageThread();
	- egarly loaded Sender and recipient in the message repository of API.
	
197 - Delete Messagin on the client.
	- Added deleteMessage() in the message service message component.
	- Added in message html - <button (click)="$event.stopPropagation()" class="btn btn-outline-danger" (click)="deleteMessage(message.id)">Delete</button>
	
198 - Section 15 summary.
